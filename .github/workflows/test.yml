name: Test Suite

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  schedule:
    # 毎日午前2時（JST 11:00）に実行
    - cron: '0 2 * * *'

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js (for tools that need it)
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install bats-core
      run: |
        sudo apt-get update
        sudo apt-get install -y bats

    - name: Install test dependencies
      run: |
        # テストに必要なツールをインストール
        sudo apt-get install -y jq curl

        # version-checkerが依存するツールを最小限インストール
        mkdir -p ~/.local/bin

        # GitHub CLI (テストで使用)
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt-get update
        sudo apt-get install gh

    - name: Create cache directory
      run: mkdir -p ~/.unified-software-manager-manager/cache

    - name: Run unit tests
      run: bats tests/version-checker.bats

    - name: Run integration tests
      run: bats tests/version-checker-integration.bats
      env:
        # GitHub token for API access (optional, prevents rate limiting)
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Run full test suite
      run: bats tests/
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  shellcheck:
    name: Shell Script Linting
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install shellcheck
      run: sudo apt-get update && sudo apt-get install -y shellcheck

    - name: Run shellcheck on main scripts
      run: |
        shellcheck version-checker.sh
        shellcheck lib/version-functions.sh
        shellcheck *.sh

    - name: Run shellcheck on test files (if they have shell code)
      run: |
        # batsファイルにshell codeが含まれる場合の検証
        find tests/ -name "*.bats" -exec shellcheck -s bash {} \; || true

  yaml-validation:
    name: YAML Configuration Validation
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install yamllint
      run: pip install yamllint

    - name: Validate YAML files
      run: |
        yamllint monitoring-configs/tools.yaml
        yamllint .github/workflows/

    - name: Validate GitHub Actions workflows
      uses: rhyeal/github-actions-yaml-validator@v1
      with:
        use_gitignore: true

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y bats jq curl time

    - name: Install GitHub CLI
      run: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt-get update
        sudo apt-get install gh

    - name: Performance benchmark
      run: |
        echo "## Performance Test Results" >> $GITHUB_STEP_SUMMARY
        echo "| Test | Duration |" >> $GITHUB_STEP_SUMMARY
        echo "|------|----------|" >> $GITHUB_STEP_SUMMARY

        # Single tool check performance
        duration=$( (time timeout 30 ./version-checker.sh --check gh) 2>&1 | grep real | awk '{print $2}')
        echo "| Single tool check (gh) | $duration |" >> $GITHUB_STEP_SUMMARY

        # Cache performance test
        ./version-checker.sh --clear-cache
        duration1=$( (time timeout 30 ./version-checker.sh --check gh) 2>&1 | grep real | awk '{print $2}')
        duration2=$( (time timeout 30 ./version-checker.sh --check gh) 2>&1 | grep real | awk '{print $2}')
        echo "| First run (no cache) | $duration1 |" >> $GITHUB_STEP_SUMMARY
        echo "| Second run (cached) | $duration2 |" >> $GITHUB_STEP_SUMMARY

      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install git-secrets
      run: |
        git clone https://github.com/awslabs/git-secrets.git
        cd git-secrets && sudo make install

    - name: Configure git-secrets
      run: |
        git secrets --register-aws
        git secrets --install
        git secrets --add 'GITHUB_TOKEN'
        git secrets --add 'API_KEY'
        git secrets --add '[Pp]assword'

    - name: Scan for secrets
      run: git secrets --scan

    - name: Check for hardcoded credentials
      run: |
        # 基本的な認証情報パターンをチェック
        if grep -r -i -E "(password|passwd|pwd|api_key|secret|token)" --include="*.sh" --include="*.yaml" --include="*.json" . | grep -v "example" | grep -v "template" | grep -v "test"; then
          echo "Potential credentials found in code!"
          exit 1
        fi

  compatibility-test:
    name: Compatibility Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install bats and dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y bats jq curl

    - name: Test on different OS versions
      run: |
        bats tests/version-checker.bats
        ./version-checker.sh --help

    - name: Test bash version compatibility
      run: |
        echo "Bash version: $BASH_VERSION"
        # Bash 4.0+ features check
        if [[ ${BASH_VERSION%%.*} -lt 4 ]]; then
          echo "Warning: Old bash version detected"
        fi

  docs-and-coverage:
    name: Documentation and Test Coverage
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y bats jq curl
        pip install pyyaml

    - name: Generate test coverage report
      run: |
        echo "## Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        # Function coverage analysis
        total_functions=$(grep -c "^[a-zA-Z_][a-zA-Z0-9_]*() {" lib/version-functions.sh)
        tested_functions=$(grep -c "@test.*normalize_version\|@test.*version_compare" tests/version-checker.bats)
        coverage=$((tested_functions * 100 / total_functions))

        echo "### Function Coverage" >> $GITHUB_STEP_SUMMARY
        echo "- Total functions: $total_functions" >> $GITHUB_STEP_SUMMARY
        echo "- Tested functions: $tested_functions" >> $GITHUB_STEP_SUMMARY
        echo "- Coverage: ${coverage}%" >> $GITHUB_STEP_SUMMARY

        # Test statistics
        total_tests=$(bats tests/ --count)
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Statistics" >> $GITHUB_STEP_SUMMARY
        echo "- Total tests: $total_tests" >> $GITHUB_STEP_SUMMARY

    - name: Validate documentation
      run: |
        # CLAUDE.mdにテスト実行コマンドが記載されているか確認
        if ! grep -q "bats tests/" CLAUDE.md; then
          echo "Warning: Test execution command not documented in CLAUDE.md"
        fi

        # READMEにテスト情報があるか確認
        if [ -f README.md ] && ! grep -q -i "test" README.md; then
          echo "Consider adding test information to README.md"
        fi
